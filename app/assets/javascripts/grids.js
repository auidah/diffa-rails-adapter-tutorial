window.Diffa = window.Diffa || new Object;

function urlTemplate(tmpl) { 
    return function template() { 
        var attrs = this.attributes;
        return tmpl.replace(/:([([a-zA-Z0-9]*)/g, function(_whole, name) {
            return attrs[name] || '';
        });
    }
}
var DOWNSTREAM_VERSION_SYNC_NOTIFICATION = {
    text: 
        "The versions of futures and options are only calculated in the trades " +
        "system, so if you do change the data in a risk-system, it will not match " +
        "until you sync the trade manually.",
    type: 'information'
};

Diffa.Instrument = Backbone.Model.extend({
    validate: function validate(attributes) {
        if (attributes.price < 0) { return "invalid price: " + attributes.price; };
        console.log("validate", attributes);
    },
    
    parse: function(json) {
        var contract_period = new Date(0, 0, 1, 0, 0);
        if (json) { 
            if (json.contract_period) {
                var contract_period_str = json.contract_period;
                var mmyy = contract_period_str.split('/', 2).map(function(n) { return parseInt(n, 10); });
                json.contract_period = new Date(0);
                json.contract_period.setMonth(mmyy[0] - 1)
                json.contract_period.setFullYear(mmyy[1]);
            };
            if (json.expiry) {
                json.expiry = new Date(json.expiry);
            }
            if (json.entry_date) json.entry_date = new Date(json.entry_date);
            if (json.trade_date) json.trade_date = new Date(json.trade_date);
            if (json.is_future) json.is_future = (json.is_future == 'Y');
            if (json.is_call) json.is_call = (json.is_call == 'Y');
            if (json.is_put) json.is_put = (json.is_put == 'Y');
            return json;
        }
    },
    toJSON: function toJSON () {
        var json = Diffa.Instrument.__super__.toJSON.call(this);
        if (json.contract_period) {
            mmyy = [json.contract_period.getMonth() + 1, json.contract_period.getFullYear()];
            json.contract_period = mmyy.join("/");
        };
        return json;
    },
    // url: urlTemplate("/grid/trades/:id"),
    defaults: { 
        ttype: 'O',
        price: 0.0001,
        entry_date: new Date(),
    },

    save: function save(key, value, options) {
        var model = this;
        var promise = Diffa.Instrument.__super__.save.call(this, key, value, options);
        promise.then(function(response) { 
            if (response) model.set(response);
        });
    }

});

Diffa.Trade = Diffa.Instrument.extend({
    initialize: function initialize(arguments) {
        Diffa.Instrument.__super__.initialize.apply(this, arguments);
        this.on('change:is_future', this.isFutureChanged.bind(this));
        this.on('change:is_call', this.isCallChanged.bind(this));
        
    },

    validate: function validate(attributes) {
        // The contract_period is generated by the server.
        if (!this.isNew()) {
            if (isNaN(attributes.contract_period.getFullYear())) {
                return "Expiry date " + attributes.contract_period.toString() + " is invalid";
            }
            if (attributes.contract_period < attributes.entry_date) { 
                return "Expiry date " + Diffa.dateToString(attributes.contract_period) + 
                        " must be after entry date " + Diffa.dateToString(attributes.entry_date);
            }
        }
        return Diffa.Trade.__super__.validate.call(this, attributes);
    },

    isFutureChanged: function isFutureChanged (model, value, opts) {
        console.log("Trade#isFutureChanged", model.attributes, value);
        if (value) model.set({is_put: null, is_call: null });
    },
    isCallChanged: function isCallChanged (model, value, opts) {
        console.log("Trade#isCallChanged", model.attributes, value);
        if (value) model.set({is_future: false, is_put: false });
    },
    pushDownstream: function () {
        var rpcEndpoint = this.url() + '/push';
        return $.ajax({url: rpcEndpoint, type: 'POST', dataType: 'json', headers: { 'X-authToken': Diffa.authToken } }).
            pipe(function(futureJson, state, xhr) {
                return new Diffa.Future(futureJson);
        });
    },
    defaults: _.extend({quantity: 1}, Diffa.Instrument.prototype.defaults)
});
Diffa.MonthlyContractedInstrument = {
    validate: function validate(attributes) {
        if (attributes.month < 1 || attributes.month > 12) {
            return "Specified month: " + attributes.month + " isn't a valid month";
        }
        var contract_period = new Date(attributes.year, attributes.month - 1, 1);
        console.log("yy", attributes.year, "mm", attributes.month, "date", contract_period, "entry", attributes.entry_date);
        if (contract_period < attributes.entry_date) { 
            return "Expiry date " + Diffa.dateToString(contract_period) + 
                    " must be after entry date " + Diffa.dateToString(attributes.entry_date);
        }
        return Diffa.Trade.__super__.validate.call(this, attributes);
    },

}

Diffa.Future = Diffa.Instrument.extend(_.extend({ }, Diffa.MonthlyContractedInstrument));
Diffa.Option = Diffa.Instrument.extend(_.extend({ }, Diffa.MonthlyContractedInstrument));



Diffa.Trade.prototype.__properties = ['id', 'type', 'quantity', 'expiry', 'price', 'direction',
                      'entry_date', 'version'];

Diffa.Trade.prototype.toString = function() { 
    return "<Diffa.Trade " + JSON.stringify(this) + ">";
}

Diffa.DateEditor = function(args) {
    this.container    = args.container;
    this.column       = args.column;
    this.defaultValue = null;
    this.$input       = this.createTextInputElement();
//     this.picker       = this.$input.glDatePicker({
//         position: 'static', showAlways: true,
//         onChange: this.whenChanged.bind(this)
//     });
}

_.extend(Diffa.DateEditor.prototype, Slickback.EditorMixin, {
    serializeValue: function() {
        var parsed = new Date(this.$input.val());
        // return this.currval || this.$input.val();
        return parsed;
    },

    validate: function() {
        var column = this.column;
        var date = new Date(this.$input.val());
        if (isNaN(date.getTime())) {
            return { valid: false, msg: "Date " + this.$input.val() + " is not a valid date" };
        }
        return column.validator ?  column.validator(this.$input.val()) : { valid: true, msg: null };
    },
    whenChanged: function(target, value) {
        var serialized = Diffa.dateToString(value);
        this.$input.val(serialized);
        this.currval = value;
    }
});

Diffa.dateToString = function dateToString(date) {
    if (!date) { ("Date is undefined!") };
    return [date.getFullYear(), date.getMonth() +1, date.getDate()].join("/");
}
Diffa.GridView = {};
Diffa.GridView.DateFormatter = function DateFormatter(row, cell, value, columnDef, dataContext) {
    var value = dataContext.get(columnDef.field);
    if (!value) return;
    return Diffa.dateToString(value);
}


Diffa.CheckboxEditor = function CheckboxEditor(args) {
    this.container    = args.container;
    this.column       = args.column;
    this.defaultValue = null;
    this.$input       = $('<input/>').attr('type', 'checkbox');
    this.$input.appendTo(this.container);
    this.$input.focus().select();
    this.$input.val = function checkboxVal (maybeValue) {
        return $(this).attr('checked') !== undefined;
    }
  }

  function isValueChanged() {;
    return Slickback.EditorMixin.isValueChanged.call(this);
  }
    function loadValue(model) {
        var value = model.get(this.column.field);
        $(this.$input).attr('checked', value);
    }

  var serializeValue = function() {
    return !!this.$input.attr('checked');
  };

  var validate = function() {
      return { valid: true,  msg: null };
  };

  _.extend(Diffa.CheckboxEditor.prototype, Slickback.EditorMixin, {
    serializeValue: serializeValue,
    validate:       validate,
    loadValue:      loadValue
  });


Diffa.GridView.TradePusherRenderer = function TradePusherRenderer(row, cell, value, columnDef, trade) {
    var wrapper = $('<div/>');
    $('<button/>').attr('id', 'tradepusher-' + trade.cid).text('\u2192').addClass('tradepusher').appendTo(wrapper);
    return wrapper.html();
}

Diffa.GridView.TradeDeleterRenderer = function TradeDeleterRenderer(row, cell, value, columnDef, trade) {
    var wrapper = $('<div/>');
    var button = $('<button/>').addClass('deleter').attr('id', 'delete-' + trade.cid).appendTo(wrapper);
    var icon_cell = $('<span/>').text('\u00a0').addClass('icon-trash').addClass('icon-black').appendTo(button);
    return wrapper.html();
}



Diffa.GridView.CheckmarkFormatter = function CheckmarkFormatter(row, cell, value, columnDef, trade) {
    var value = trade.get(columnDef.field);
    // Either a unicode ballot box with check or ballot box (empty) character.
    return value ? '\u2611' : '\u2610';
}

    Diffa.Views = Diffa.Views || {};
    Diffa.Views.AutoSaveGrid = Backbone.View.extend({
        initialize: function initialize(initOptions) {
            var gridOptions = _.extend({},{
                editable:         true,
                formatterFactory: Slickback.BackboneModelFormatterFactory,
                enableColumnReorder: false,
                forceFitColumns: true,
                autoHeight: true
            }, initOptions.grid);

            var collection = this.collection;

            var grid = new Slick.Grid(this.el,collection, this.columns, gridOptions);
            collection.bind('change',function(model,options) {

                var changedProperties = Object.keys(model.changedAttributes())
                // Do not save iff only the version has changed, because this value doesn't converge for options and futures.
                if (! (changedProperties.length == 1 && changedProperties[0] == 'version')) {
                    model.save();
                }
            });

            grid.onMouseEnter.subscribe(this.cellMouseOver.bind(this));
            grid.onMouseLeave.subscribe(this.cellMouseLeave.bind(this));

            collection.onRowCountChanged.subscribe(function() {
                grid.updateRowCount();
                grid.render();
            });

            collection.onRowsChanged.subscribe(function() {
                grid.invalidateAllRows();
                grid.render();
            });

            collection.fetch();

            _.bindAll(this, 'deleteButtonPressed');
            this.$el.on('click', '.deleter', this.deleteButtonPressed);
        },
        cellMouseOver: function(e, args) {
            var cell = args.grid.getCellFromEvent(e);
            var col = this.columns[cell.cell];
            if (col.id != 'id') return;

            if (!$(e.target).data('grid.tooltip')) { 
                var entity = this.collection.at(cell.row);
                $(e.target).tooltip({title: this.toolTipFor(entity), trigger: 'hover', html:true}).tooltip('show');
                $(e.target).data('grid.tooltip', true);
            }
        },
        cellMouseLeave: function(e, args) {
                $(e.target).tooltip('hide');
        },
        toolTipFor: function(ent) { 
            return this.toolTipTemplate(ent.attributes);
        },
        deleteButtonPressed: function deleteButtonPressed(evt) {
            var id = $(evt.currentTarget).attr('id');
            if (!id) return;
            var m = id.match(/^delete-(.+)$/);
            if (!m) return;
            this.collection.getByCid(m[1]).destroy();
        },

    });

    var booleanChoices = [ 
        { label: "True", value: true },
        { label: "False", value: false },
    ];

    var dateWidth = 120;
    Diffa.Views.TradesGrid = Diffa.Views.AutoSaveGrid.extend({
        columns: [
            {id: "id", name: "Id", field: "id", width:80},
            {id: "quantity", name: "Qty.", field: "quantity", width: 60, 
                editor: Slickback.NumberCellEditor},
            {id: "price", name: "Price", field: "price", width: 80, 
                editor: Slickback.NumberCellEditor, precision: 2},
            {id: "is_future", name: "Future?", field: "is_future", width: 40, 
                editor: Diffa.CheckboxEditor, formatter: Diffa.GridView.CheckmarkFormatter },
            {id: "is_call", name: "Call?", field: "is_call", width: 40, 
                editor: Slickback.DropdownCellEditor, formatter: Slickback.ChoiceFormatter,
                choices: [
                    { label: "Call", value: true },
                    { label: "Put", value: false },
            ]},
            {id: "contractDate", name: "Contract Date", field: "contract_period", width: dateWidth,
                 formatter: Diffa.GridView.DateFormatter,
                 editor: Diffa.DateEditor},
            {id: "propagate", name: "Sync", field: "trade_id", width: dateWidth/3,
                 formatter: Diffa.GridView.TradePusherRenderer},
            {id: "delortify", name: "Delete", field: "trade_id", width: dateWidth/3,
                 formatter: Diffa.GridView.TradeDeleterRenderer}
        ],

        initialize: function initialize(initOptions) { 
            Diffa.Views.TradesGrid.__super__.initialize.call(this, initOptions);
            _.bindAll(this, 'propagateButtonPressed');
            this.$el.on('click', '.tradepusher', this.propagateButtonPressed);
            this.bigbus = initOptions.bigbus;
        
        },
        propagateButtonPressed: function propagateButtonPressed(evt) {
            var id = $(evt.target).attr('id');
            if (!id) return;
            var m = id.match(/^tradepusher-(.+)$/);
            if (!m) return;
            var bus = this.bigbus;
            this.collection.getByCid(m[1]).pushDownstream().then(function (riskything) {
                bus.trigger('refreshallthethings');
            });
        },
        toolTipTemplate: _.template("<dl class='details-tip'>" +
            "<dt>Trade Id:</dt><dd><%= id %></dd>" +
            "<dt>Version:</dt><dd><%= version.substr(0, 7) + '\u2026' %></dd>" +
            "<hr/>" +
            "<dt>Trade type:</dt><dd><%= is_future ? 'Future' : 'Option' %></dd>" +
            "<dt>Premium:</dt><dd><%= premium %></dd>" +
            "<dt>Strike:</dt><dd><%= strike %></dd>" +
            "<dt>Buy/Sell:</dt><dd><%= {B: 'Buy', S: 'Sell'}[buy_sell] %></dd>" +
            "<dt>Currency:</dt><dd><%= currency %></dd>" +
            "<dt>Option type:</dt><dd><%= option_type %></dd>" +
            "<dt>Entry Date:</dt><dd><%= [entry_date.getFullYear(), entry_date.getMonth(), entry_date.getDay()].join('-') %></dd>" +
            "<dt>Quote:</dt><dd><%= symbol %></dd>" +
            // "<dt>Other:</dt><dd><pre><%= JSON.stringify(obj, null, 2) %></pre></dd>" +
            "</dl>"
        )
    });

    Diffa.Views.FuturesGrid = Diffa.Views.AutoSaveGrid.extend({
        columns: [
            {id: "id", name: "Id", field: "trade_id"},
            {id: "lots", name: "Lots", field: "lots", 
                editor: Slickback.NumberCellEditor},
            {id: "price", name: "Price", field: "price",
                editor: Slickback.NumberCellEditor, precision: 2},
            {id: "month", name: "Month", field: "month", width: dateWidth,
                 editor: Slickback.NumberCellEditor},
            {id: "year", name: "Year", field: "year", width: dateWidth,
                 editor: Slickback.NumberCellEditor},
            {id: "delortify", name: "Delete", field: "trade_id", width: dateWidth/3,
                 formatter: Diffa.GridView.TradeDeleterRenderer}
        ],
        toolTipTemplate: _.template("<dl class='details-tip'>" +
            "<dt>Trade Id:</dt><dd><%= trade_id %></dd>" +
            "<dt>Version:</dt><dd><%= version.substr(0, 7) + '\u2026' %></dd>" +
            "<hr/>" +
            "<dt>Quote:</dt><dd><%= quote %></dd>" +
            // "<dt>Trade type:</dt><dd><%= ttype == 'O' ? 'Option' : (ttype == 'F' ? 'Future' : 'Unknown') %></dd>" +
            "<dt>Entry Date:</dt><dd><%= [entry_date.getFullYear(), entry_date.getMonth(), entry_date.getDay()].join('-') %></dd>" +
            // "<dt>Other:</dt><dd><pre><%= JSON.stringify(obj, null, 2) %></pre></dd>" +
            "</dl>"
        )

    });

    Diffa.Views.OptionsGrid = Diffa.Views.AutoSaveGrid.extend({
            columns: [
            {id: "id", name: "Id", field: "trade_id"},
            {id: "lots", name: "Lots", field: "lots", 
                editor: Slickback.NumberCellEditor},
            {id: "strike", name: "Strike", field: "strike_price",
                editor: Slickback.NumberCellEditor, precision: 2},
            {id: "strike", name: "Premium", field: "premium_price",
                editor: Slickback.NumberCellEditor, precision: 2},
            {id: "month", name: "Month", field: "month", width: dateWidth,
                 editor: Slickback.NumberCellEditor},
            {id: "year", name: "Year", field: "year", width: dateWidth,
                 editor: Slickback.NumberCellEditor},
            {id: "delortify", name: "Delete", field: "trade_id", width: dateWidth/3,
                 formatter: Diffa.GridView.TradeDeleterRenderer}
        ],
        toolTipTemplate: _.template("<dl class='details-tip'>" +
            "<dt>Trade Id:</dt><dd><%= trade_id %></dd>" +
            "<dt>Version:</dt><dd><%= version.substr(0, 7) + '\u2026' %></dd>" +
            "<hr/>" +
            "<dt>Entry Date:</dt><dd><%= [trade_date.getFullYear(), trade_date.getMonth(), trade_date.getDay()].join('-') %></dd>" +
            "<dt>Premium price:</dt><dd><%= premium_price %></dd>" +
            "<dt>Excercise Right:</dt><dd><%= exercise_right %></dd>" +
            "<dt>Excercise Type:</dt><dd><%= exercise_type %></dd>" +
            "<dt>Quote:</dt><dd><%= quote %></dd>" +
            // "<dt>Other:</dt><dd><pre><%= JSON.stringify(obj, null, 2) %></pre></dd>" +
            "</dl>"
        )

    });


    Diffa.Views.TradeErrors = Backbone.View.extend({
        initialize: function initialize(options) {
            this.collection.on('error', this.showError.bind(this));
        },

        showError: function showError(model, error, _options) {
            console.log(error);
            $('<div/>').hide().addClass('error').text(error.toString()).appendTo(this.el).slideDown().
                delay(1000).slideUp(function () {
                    $(this).remove();
                });
        }
    });

    Diffa.Views.Control = Backbone.View.extend({
        markup: '<button/>',
        render: function () {
            $(this.el).empty();
            var syncButton = $(this.markup).text('Reload').addClass('reload').appendTo(this.el);
            $('&#xa0;').appendTo(this.el);
            var rowAddButton = $(this.markup).text('Add Row').addClass('addRow').appendTo(this.el);
        },
        initialize: function initialize(options) {
            this.render();
            this.$('button.addRow').click(this.addRow.bind(this));
            this.$('button.reload').click(this.reload.bind(this));
        },
        addRow: function addRow() { 
            this.collection.create();
        },
        reload: function reload() { 
            this.collection.fetch();
        }
    });

    Diffa.Models = Diffa.Models || {};
    var bigbus = _.clone(Backbone.Events);

    var oldSync = Backbone.sync;
    Backbone.sync = function sync (method, model, options) {
        Diffa.authToken = Diffa.authToken || $('meta[name="diffa.authToken"]').attr('content');
        options = _.extend({headers: { 'X-authToken': Diffa.authToken } }, options);
        return oldSync(method, model, options);
    };

    function GridComponent(url, baseElt, modelType, gridViewType, bigbus, listener) {
        this.CollectionType = Slickback.Collection.extend({
            model: modelType,
            url: url,
        });

        var collection = new this.CollectionType();
        bigbus.on('refreshallthethings', function() { collection.fetch() ; })
        this.collection = collection;
        

        this.control = new Diffa.Views.Control({
            el: $('<div/>').appendTo(baseElt).addClass('add-row-button'),
            collection: this.collection
        });

        this.tradeEntryView = new gridViewType({
            el: $('<div/>').css('height', 'auto').addClass('grid-container').appendTo(baseElt), 
            collection: this.collection,
            bigbus: bigbus,
        });


        this.errorView = new Diffa.Views.TradeErrors({
            el: $('<div/>').appendTo(baseElt), 
            collection: this.collection
        });


        if (listener) {
            collection.on('change', listener);
        }
    };

    Diffa.BootstrapGrids = function Diffa_BootstrapGrids (baseUrl, baseElt) {
        var urls = { 
            trades: baseUrl + '/trades', 
            futures: baseUrl + '/futures',
            options: baseUrl + '/options',
        };

        function notifyUserAboutVersionSyncRequirement () {
            // Using cookies isn't the best way to do this, but it's the easiest and commonly avaliable.
            var cookieName = 'userNotifiedAboutVersionSyncRequirement';
            console.log(cookieName);
            if ($.cookie(cookieName)) return;
            
            noty(DOWNSTREAM_VERSION_SYNC_NOTIFICATION);
            $.cookie(cookieName, 'truthy-value');
        }

        Diffa.tradesGrid = new (function() { 
            GridComponent.call(this,
            urls.trades, $('.trades'), 
            Diffa.Trade, Diffa.Views.TradesGrid, bigbus
        ) });

        Diffa.futuresGrid = new GridComponent(
            urls.futures, $('.futures'), 
            Diffa.Future, Diffa.Views.FuturesGrid, bigbus,
            notifyUserAboutVersionSyncRequirement
        );
        Diffa.optionsGrid = new GridComponent(
            urls.options, $('.options'), 
            Diffa.Option, Diffa.Views.OptionsGrid, bigbus,
            notifyUserAboutVersionSyncRequirement
        );
            
    };
